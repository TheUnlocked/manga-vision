name: Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: The release version
        type: string
        required: true
      deploy_maven_central:
        description: Whether to deploy to Maven Central
        type: boolean
        required: true
      deploy_dry_run:
        description: Whether this is a dry run (if true, the package will not actually be deployed)
        type: boolean
        required: true
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Cache OpenCV SDK
        id: cache-opencv-sdk
        uses: actions/cache@v4
        with:
          path: opencv-sdk
          key: ${{ runner.os }}-opencv-${{ hashFiles('opencv-build-config.py', '.gitmodules') }}

      - name: Compile OpenCV SDK
        if: steps.cache-opencv-sdk.outputs.cache-hit != 'true'
        run: |
          python3 ./opencv-src/platforms/android/build_sdk.py \
            ./opencv-sdk ./opencv-src \
            --sdk_path $ANDROID_SDK_ROOT \
            --ndk_path $ANDROID_NDK_ROOT \
            --config ./opencv-build-config.py \
            --modules_list 'core,imgproc' \
            --no_samples_build --use_android_buildtools \
            --no_media_ndk --no-strict-dependencies

      - name: Cache .gradle
        uses: burrunan/gradle-cache-action@v3

      - name: Build app
        run: ./gradlew assembleRelease

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: manga-vision
          path: mangavision/build/outputs/aar/mangavision-release.aar

      - name: Prepare deployment
        if: ${{ inputs.deploy_maven_central }}
        env: &deploy_env
          MAVEN_PUBLISH_VERSION: ${{ inputs.version }}
          JRELEASER_GITHUB_TOKEN: ${{ github.token }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.MAVEN_CENTRAL_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.MAVEN_CENTRAL_GPG_SECRET_KEY }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        run: |
          ./gradlew publish
          ./gradlew jreleaserConfig

      - name: Deploy to Maven Central
        if: ${{ inputs.deploy_maven_central && !inputs.deploy_dry_run }}
        env: *deploy_env
        run: ./gradlew jreleaserDeploy
